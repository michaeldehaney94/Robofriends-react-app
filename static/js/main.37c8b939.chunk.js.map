{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Header.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Header","nextProps","nextState","Component","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAgBeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,gCACI,6BAAKL,IACL,4BAAIC,WCeLK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GAGd,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCGlBC,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACG,qBAAKV,UAAU,MAAf,SACK,uBACI,aAAW,gBACXA,UAAU,mCACVW,KAAK,SACLC,YAAY,mBACZC,SAAUH,OCRpBI,E,2KAGF,SAAsBC,EAAWC,GAC7B,OAAO,I,oBAGX,WACI,OACI,8BACI,oBAAIhB,UAAU,KAAd,+B,GAVKiB,aAgBNH,ICPAI,G,MARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,aCiBJC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WAEI,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAKX,MAAMK,a,GAjBCP,aC4DZe,E,kDArDX,aAAe,IAAD,8BACV,gBAqBJC,eAAiB,SAACC,GAEd,EAAKH,SAAS,CAAEtB,YAAayB,EAAMC,OAAOC,SAtB1C,EAAKV,MAAQ,CACTtB,OAAQ,GACRK,YAAa,IAJP,E,qDAUd,WAAqB,IAAD,OAChB4B,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKV,SAAS,CAAE3B,OAAOqC,S,oBAY/B,WACI,MAAgCX,KAAKJ,MAA7BtB,EAAR,EAAQA,OAAQK,EAAhB,EAAgBA,YACViC,EAAiBtC,EAAOuC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,cACjBC,SAASrC,EAAYoC,kBAI1B,OAAQzC,EAAO2C,OAGX,sBAAK/C,UAAU,KAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWU,aAAcoB,KAAKG,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU7B,OAAQsC,WAPlC,oBAAI1C,UAAU,KAAd,4B,GAtCUiB,aCIH+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.37c8b939.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//destructing id, name, email\r\nconst Card = ({ name, email, id }) => {\r\n\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    \r\n    return (\r\n        <div>\r\n            { //wrapped in curly braces to show that its javascript code\r\n                robots.map((user, i) => {\r\n                    //i for array 'index'\r\n                    //key={i} identifies what is or was in the array\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n       </div> \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n       <div className=\"pa2\">\r\n            <input \r\n                aria-label='Search Robots'\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robots...\" \r\n                onChange={searchChange} //event listener\r\n            />\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from \"react\";\r\n\r\nclass Header extends Component {\r\n    //when the web app loads, the header will render once because it \r\n    //returned 'false'.\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        \r\n        if (this.state.hasError) {\r\n            return <h1>Oops! This is not good.</h1>    \r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from '../components/SearchBox';\r\nimport Header from \"../components/Header\";\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n        }\r\n    }\r\n\r\n    //mount lifecycle\r\n    //fetch data from json api to GET data\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({ robots:users });\r\n        })\r\n        \r\n    }\r\n\r\n    //event listener function\r\n    onSearchChange = (event) => {\r\n        //add 'setState' to update searchfield state or any state\r\n        this.setState({ searchfield: event.target.value })\r\n        //console.log(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase()\r\n            .includes(searchfield.toLowerCase());\r\n        }) \r\n\r\n        //if there are multiple users to load which may take time\r\n        return !robots.length ?\r\n        <h1 className=\"tc\">Loading...</h1> :\r\n        (\r\n            <div className=\"tc\">\r\n                <Header />\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/> \r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div> \r\n        );\r\n    } \r\n}\r\n\r\n\r\nexport default App;\r\n\r\n//STATE is an object that desctibes the application\r\n//state is able to change it's value\r\n//PROPS are values that come from state\r\n//the state tells the props what values is to be passed\r\n\r\n//Lifecycle Methods or Hooks \r\n//METHODS - Mounting, Updating, Unmounting\r\n//it automatically triggers when the app is loading on a website.\r\n//These are called lifecycle hooks because each time they run, a component does something","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n  <App />, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}